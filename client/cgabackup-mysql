#!/bin/bash

# This file makes a dump of all mysql databases. The mysql user needs read
# access to all databases. The files are put into /var/backup/mysql .
# cgabackup-mysql is run by cron, before the real cgabackup script is executed.
#
# The dump is made to a temporary file and compared with the previous version.
# If the file is an exact copy (If no changes to the database were made), the
# temporary file is deleted again. Therefore CGA-Backup doesn't need to copy
# the file every instance of the backup, only if changes to the database were
# made.
#
# To set the correct rights use:
# grant select on *.* to cgabackup@localhost identified by 'PASSWORD';

CFGFILE="/etc/cgabackup-mysql.conf"

BACKUP_PATH=`crudini --get ${CFGFILE} cgabackup backup_path`
ERR=$?
if [ $ERR == 127 ] ; then
  echo "An error occured. Maybe you need to install 'crudini'?"
  exit 1
elif [ $ERR != 0 ] ; then
  echo "An error occured. Maybe you need to update ${CFGFILE}?"
  echo
  echo "Example config file:"
  echo "https://github.com/plepe/CGA-Backup/blob/master/client/cgabackup-mysql.conf"
  exit 1
fi

if [ ! -d $BACKUP_PATH ] ; then
  echo "Backup path '$BACKUP_PATH' does not exist. Please create!"
  exit 1
fi

DBs=`mysql --defaults-extra-file=${CFGFILE} -B -N -e "show databases;"`
if [ $? != 0 ] ; then
  echo "An error occured. Can't get list of databases."
  exit 1
fi

for DB in $DBs ; do
	echo -n "Backup of DB $DB - "
	mysqldump --defaults-extra-file=${CFGFILE} --skip-lock-tables --skip-comments $DB > $BACKUP_PATH/__$DB.sql

        if [ ! -f $BACKUP_PATH/$DB.sql ] ; then
		mv $BACKUP_PATH/__$DB.sql $BACKUP_PATH/$DB.sql
		echo "finished (new backup)"
        elif [ `stat -c "%s" $BACKUP_PATH/__$DB.sql` -eq `stat -c "%s" $BACKUP_PATH/$DB.sql` ] ; then
		if [ "`diff -N $BACKUP_PATH/__$DB.sql $BACKUP_PATH/$DB.sql`" == "" ] ; then
			rm $BACKUP_PATH/__$DB.sql
			echo "no change, keeping old backup"
		else
			mv $BACKUP_PATH/__$DB.sql $BACKUP_PATH/$DB.sql
			echo "finished (same size)"
		fi
	else
		mv $BACKUP_PATH/__$DB.sql $BACKUP_PATH/$DB.sql
		echo "finished (changed)"
	fi
done
