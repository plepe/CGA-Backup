#!/usr/bin/perl
use POSIX qw(strftime);
use Getopt::Std;

$CONFIGFILE="/etc/cgabackup-server.conf";

sub month_sub {
  my $str=$_[0];
  my $sub=$_[1];
  my $i;

  for($i=$sub;$i>0;$i--) {
    if($str%100==1) {
      $str=(substr($str, 0, 4)-1)*100+12;
    }
    else {
      $str-=1;
    }
  }

  return $str;
}

sub month_add {
  my $str=$_[0];
  my $add=$_[1];
  my $i;

  for($i=$add;$i>0;$i--) {
    if($str%100==12) {
      $str=(substr($str, 0, 4)+1)*100+1;
    }
    else {
      $str+=1;
    }
  }

  return $str;
}

sub bakcmp {
  $a=~/([0-9]{8})([a-z]?)/;
  $a_d=$1; $a_k=$2;
  $b=~/([0-9]{8})([a-z]?)/;
  $b_d=$1; $b_k=$2;
  if($b_d eq $a_d) {
    $b_k cmp $a_k;
  }
  else {
    $a <=> $b;
  }
}

sub process {
  my $p=$_[0];
  my %conf=%{$_[1]};
  my %keep=%{$_[2]};
  my $DIRS;

  # Gibts hier eine backup.conf? Wenn ja, dann Config ueberschreiben
  if(-f "$p/cleanup.conf") {
    open($CONF, "<$p/cleanup.conf");
    while($row=<$CONF>) {
      chop($row);
      chop($row) if(substr($row, length($row)-1, 1) eq "\r"); # for DOS-Files

      # Ignore Lines starting with #
      if($row !~ /^#/) {
	($key, $value)=split("=", $row);
	$keep{$key}=$value;
      }
    }
    close($CFG);
  }

  # Wenns einen last_backup-Link gibt, dann sind wir in einem aktiven
  # Backup drin. Dort entsprechend der Config die alten Daten loeschen
  if(-l "$p/last_backup") {
    print "* $p\n";

    # Alle Verzeichnisse einlesen
    # Vollstaendige Backups in @backup_list
    # Unvollstaendige Backups in @backup_incomplete_list
    @backup_list=();
    @backup_incomplete_list=();
    opendir($DIRS, $p);
    while($r=readdir($DIRS)) {
      if((-d "$p/$r")&&($r =~ /^([0-9]{8}[a-z]?)_incomplete$/)) {
        push @backup_incomplete_list, $1;
      }
      elsif((-d "$p/$r")&&($r =~ /^([0-9]{8}[a-z]?)$/)) {
        push @backup_list, $1;
      }
    }
    closedir($DIRS);

    # Die Listen nach Datum sortieren
    @backup_list=sort bakcmp @backup_list;
    @backup_incomplete_list=sort bakcmp @backup_incomplete_list;
    # In den keep_backup_lists steht drin, welche Backups aufgehoben werden
    %keep_backup_list=();
    %keep_backup_incomplete_list=();

    print "Keep: @{[%keep]}\n" if($debug);
    print "Backuplist : ".join(", ", @backup_list)."\n" if($debug);
    print "IBackuplist: ".join(", ", @backup_incomplete_list)."\n" if($debug);

    # Das aktuellste Backup wird auf jeden Fall aufgehoben
    $keep_backup_list{$backup_list[@backup_list-1]}=1;
    # Sollte das letzte inkomplette Backup neuer sein auch aufheben
    if($backup_incomplete_list[@backup_incomplete_list-1]>$backup_list[@backup_list-1]) {
      $keep_backup_incomplete_list{$backup_incomplete_list[@backup_incomplete_list-1]}=1;
    }

    # Unkomplette Backups ausmustern
    $oldest_incomplete=strftime("%Y%m%d", localtime(time()-$keep{incomplete}*86400));
    foreach(@backup_incomplete_list) {
#      print "  $_ $oldest_incomplete\n";
      if($_>=$oldest_incomplete) {
        $keep_backup_incomplete_list{$_}=1;
      }
    }

    # Die aktuellsten Backups aufheben
    $oldest=strftime("%Y%m%d", localtime(time()-$keep{daily}*86400));
    foreach(@backup_list) {
      if($_>=$oldest) {
        $keep_backup_list{$_}=1;
      }
    }

    # Behalte ausserdem das Backup, auf das 'last_backup' zeigt
    $keep_backup_list{readlink("$p/last_backup")}=1;
    $keep_backup_incomplete_list{readlink("$p/last_backup")}=1;

    # Von den letzten n Wochen das erste Backup aufheben
    $monday_diff=-3;
    while(strftime("%u", localtime(time()-$monday_diff*86400)) ne "1") {
      $monday_diff++;
    }
    for($i=0; $i<=$keep{weekly}; $i++) {
      $monday=strftime("%Y%m%d", localtime(time()-($i*7+$monday_diff)*86400));
      $sunday=strftime("%Y%m%d", localtime(time()-($i*7+$monday_diff-6)*86400));

      @tmp=();
      foreach(@backup_list) {
        if(($monday <= $_)&&($_ <= $sunday)) {
          push @tmp, $_;
        }
      }
      if(@tmp) {
        $keep_backup_list{$tmp[0]}=1;
      }

      #print "$i -> $monday-$sunday: ".join(", ", @tmp)."\n";
    }

    # Von den letzten n Monaten das erste Backup aufheben
    for($i=0; $i<=$keep{monthly}; $i++) {
      $month=month_sub(strftime("%Y%m", localtime(time())), $i);
      @tmp=();
      foreach(@backup_list) {
        if($_=~/^$month/) {
          push @tmp, $_;
        }
      }
      if(@tmp) {
        $keep_backup_list{$tmp[0]}=1;
      }

      #print "$i -> $month: ".join(", ", @tmp)."\n";
    }

    # Von den letzten n Quartalen das erste Backup aufheben
    for($i=0; $i<=$keep{quarterly}; $i++) {
      $month1=month_sub(strftime("%Y%m", localtime(time())), $i*3);
      while(($month1%100)%3!=1) {
        $month1=month_sub($month1, 1);
      }
      $month2=month_add($month1, 1);
      $month3=month_add($month1, 2);

      @tmp=();
      foreach(@backup_list) {
        if(($_=~/^$month1/)||($_=~/^$month2/)||($_=~/^$month3/)) {
          push @tmp, $_;
        }
      }
      if(@tmp) {
        $keep_backup_list{$tmp[0]}=1;
      }

      #print "$i -> $month1-$month2: ".join(", ", @tmp)."\n";
    }

    print "Keep Backuplist : ".join(", ", keys %keep_backup_list)."\n" if($debug);
    print "Keep IBackuplist: ".join(", ", keys %keep_backup_incomplete_list)."\n" if($debug);

    # Die Backups, die nicht in den Keep-Listen sind, loeschen
    foreach(@backup_list) {
      if(!$keep_backup_list{$_}) {
	print "  Loesche $p/$_\n";
	system("rm -rf $p/$_");
	system("rm -f $p/cgabackup-$_.log");
      }
    }
    foreach(@backup_incomplete_list) {
      if(!$keep_backup_incomplete_list{$_}) {
	print "  Loesche $p/${_}_incomplete\n";
	system("rm -rf $p/${_}_incomplete");
	system("rm -f $p/cgabackup-$_.log");
      }
    }
  }
  else {
    opendir($DIRS, $p);
    while($r=readdir($DIRS)) {
      if($r !~ /^\./) {
	process("$p/$r", \%conf, \%keep);
      }
    }
    closedir($DIRS);
  }
}

# Die letzten n Tage immer aufheben
$keep{'daily'}=14;
# Die imcomplete Backups der letzten n Tage aufheben
$keep{'incomplete'}=7;
# Jeweils das erste der Backups der letzten n Wochen aufheben
$keep{'weekly'}=5;
# Jeweils das erste Backup der letzten n Monate aufheben
$keep{'monthly'}=6;
# Jeweils das erste Backup der letzten n Quartale aufheben
$keep{'quarterly'}=5;

getopt("c");
if($opt_c) {
  $CONFIGFILE=$opt_c;
}

# Configfile einlesen
open(CONF, "<$CONFIGFILE") || die "$CONFIGFILE not found!\n";
%conf=();

# Jede Zeile durchgehen
while($row=<CONF>) {
  chop($row);
  chop($row) if(substr($row, length($row)-1, 1) eq "\r"); # fuer DOS-Files

  if($row ne "") {
    # Wenn es sich um keine Leerzeile handelt, dann in die Config aufnehmen
    if($row !~ /^#/) {
      ($key, $value)=split("=", $row);
      $conf{$key}=$value;
    }
  }
  else {
    # Leerzeile -> Was machen
    @k=keys %conf;
    if(@k>0) {
      process($conf{"root_dir"}, \%conf, \%keep);
    }
    %conf=();
  }
}


@k=keys %conf;
if(@k>0) {
  process($conf{"root_dir"}, \%conf, \%keep);
}
