#!/usr/bin/perl
use POSIX qw(strftime);
use Getopt::Std;

$CONFIGFILE="/etc/cgabackup-server.conf";

$gb=1024*1024;

$var_file="/var/spool/cgabackup-build-statistic.state";
$debug=0;

sub save_var_info {
  my $VAR;
  my $status=$_[0];
  my %conf=%{$_[1]};
  my $id=join("", split(/\//, $conf{root_dir}));

  open($VAR, ">$var_file-$id");
  print $VAR strftime("%Y-%m-%d", localtime)."\n";
  print $VAR "$status\n";

  print $VAR "[done]\n";
  foreach(keys %done) {
    print $VAR "$_\n";
  }

  print $VAR "[backup_not_ended]\n";
  foreach(keys %backup_not_ended) {
    print $VAR "$_:$backup_not_ended{$_}\n";
  }

  print $VAR "[backup_not_ended_unk]\n";
  foreach(@backup_not_ended_unk) {
    print $VAR "$_\n";
  }

  print $VAR "[progress_last_backup_list]\n";
  foreach(keys %progress_last_backup_list) {
    print $VAR "$_:$progress_last_backup_list{$_}\n";
  }

  print $VAR "[progress_total_list]\n";
  foreach(keys %progress_total_list) {
    print $VAR "$_:$progress_total_list{$_}\n";
  }

  print $VAR "[last_backup_list]\n";
  foreach(keys %last_backup_list) {
    print $VAR "$_:$last_backup_list{$_}\n";
  }

  print $VAR "[total_list]\n";
  foreach(keys %total_list) {
    print $VAR "$_:$total_list{$_}\n";
  }

  close($VAR);
}

sub save_done_info {
  my $VAR;
  my %conf=%{$_[0]};
  my $id=join("", split(/\//, $conf{root_dir}));

  mkdir "/var/lib/cgabackup" if !-f "/var/lib/cgabackup";

  open($VAR, ">/var/lib/cgabackup/backup_not_ended-$id");
  foreach(keys %backup_not_ended) {
    print $VAR "$_:$backup_not_ended{$_}\n";
  }
  close($VAR);

  open($VAR, ">/var/lib/cgabackup/backup_not_ended_unk-$id");
  foreach(@backup_not_ended_unk) {
    print $VAR "$_\n";
  }
  close($VAR);

  open($VAR, ">/var/lib/cgabackup/progress_last_backup_list-$id");
  foreach(keys %progress_last_backup_list) {
    print $VAR "$progress_last_backup_list{$_}\t$_\n";
  }
  close($VAR);

  open($VAR, ">/var/lib/cgabackup/progress_total_list-$id");
  foreach(keys %progress_total_list) {
    print $VAR "$progress_total_list{$_}\t$_\n";
  }
  close($VAR);

  open($VAR, ">/var/lib/cgabackup/last_backup_list-$id");
  foreach(keys %last_backup_list) {
    print $VAR "$last_backup_list{$_}\t$_\n";
  }
  close($VAR);

  open($VAR, ">/var/lib/cgabackup/total_list-$id");
  foreach(keys %total_list) {
    print $VAR "$total_list{$_}\t$_\n";
  }
  close($VAR);
}

sub load_var_info {
  my $VAR;
  my $mode;
  my $date;
  my $status;
  my %conf=%{$_[0]};
  my $id=join("", split(/\//, $conf{root_dir}));

  if(-f "$var_file-$id") {
    open($VAR, "<$var_file-$id");
    $date=<$VAR>; chop($date);
    $status=<$VAR>; chop($status);
    if($date ne strftime("%Y-%m-%d", localtime)) {
      if($status ne "done") {
	print MAIL "Last statistic from $date not complete. Ignoring.\n";
      }
      return 0;
    }

    if($status eq "done") {
      print MAIL "Today's statistic already finished. Exiting.\n";
      exit;
    }
    else {
      print MAIL "Last statistic from today not complete. Continuing.\n";
    }

    while ($r=<$VAR>) {
      chop($r);
      if($r =~ /^\[(.*)\]$/) {
	$mode=$1;
      }
      else {
	if($mode eq "done") {
	  $done{$r}=1;
	}
	elsif($mode eq "backup_not_ended_unk") {
	  push @backup_not_ended_unk, $r;
	}
	elsif($mode eq "backup_not_ended") {
	  $r=~/^(.*):(.*)$/;
	  $backup_not_ended{$1}=$2;
	}
	elsif($mode eq "progress_last_backup_list") {
	  $r=~/^(.*):(.*)$/;
	  $progress_last_backup_list{$1}=$2;
	}
	elsif($mode eq "progress_total_list") {
	  $r=~/^(.*):(.*)$/;
	  $progress_total_list{$1}=$2;
	}
      }
    }
    
    close($VAR);
  }
}

sub update_progress {
  $p=$_[0];

  # Statisticinfos generieren - last_backup.progress
  my $last_curr=0;
  my $last_total=0;
  my $last_date=0;
  my $no_last_backup=0;
  if((-f "$p/statistic.last_backup.progress")&&
     (open($D, "tail -n 2 $p/statistic.last_backup.progress 2> /dev/null |"))) {
     <$D> =~ /^([0-9]*) ([0-9]*)$/;
     my $pre_last_curr=$1;
     my $pre_last_date=$2;
     <$D> =~ /^([0-9]*) ([0-9]*)$/;
     $last_curr=$1;
     $last_date=$2;
     if($last_date eq strftime("%Y%m%d", localtime)) {
       $last_curr=$pre_last_curr;
       $last_date=$pre_last_date;
       $no_last_backup=1;
     }

     close($D);
  }

  if(!$no_last_backup) {
    system("V=`grep $last_date $p/statistic | head -n1 | cut -f1` ; D=`date +\%Y\%m\%d` ; echo \"\$V \$D\" >> $p/statistic.last_backup.progress");
  }
  print "last last_backup $last_curr\n" if($debug);

  # Statisticinfos generieren - total.progress
  my $no_total=0;
  if((-f "$p/statistic.total.progress")&&
     (open($D, "tail -n 2 $p/statistic.total.progress 2> /dev/null |"))) {
     <$D> =~ /^([0-9]*) ([0-9]*)$/;
     my $pre_last_total=$1;
     my $pre_last_date=$2;
     <$D> =~ /^([0-9]*) ([0-9]*)$/;
     $last_total=$1;
     $last_date=$2;
     if($last_date eq strftime("%Y%m%d", localtime)) {
       $last_total=$pre_last_total;
       $last_date=$pre_last_date;
       $no_total=1;
     }

     close($D);
  }

  if(!$no_total) {
    system("V=`grep total $p/statistic | head -n1 | cut -f1` ; D=`date +\%Y\%m\%d` ; echo \"\$V \$D\" >> $p/statistic.total.progress");
  }
  print "last total $last_total\n" if($debug);

  return ($last_curr, $last_total);
}

sub process {
  my $p=$_[0];
  my $r;
  my $DIRS;
  my @list=();
  my %stat_sum;
  my %stat_modes;

  print "$p\n";
  # Wenns einen last_backup-Link gibt, dann sind wir in einem aktiven Backup drin.
  if(-l "$p/last_backup") {
    #print "* $p\n";

    if(!$done{$p}) {
      opendir($DIRS, $p);
      while($r=readdir($DIRS)) {
	if($r =~ /^[0-9]{8}/) {
	  push @list, $r;
	}
      }
      
      # Sort list by date (20001122a is before 20001122)
      @list=sort { substr($a, 0, 8) eq substr($b, 0, 8)?
                   substr($b, 8) cmp substr($a, 8):
		   substr($a, 0, 8) cmp substr($b, 0, 8) } @list;

      # Wann wurde letztes Backup beendet
      if(-f "$p/last_backup_end") {
	open($D, "<$p/last_backup_end");
	my $last_backup_end=<$D>;
	chop($last_backup_end);

	if($last_backup_end lt strftime("%Y-%m-%d 04:00", localtime(time-86400*3))) {
	  $backup_not_ended{$p}=$last_backup_end;
	}

	close($D);
      }
      else {
	push @backup_not_ended_unk, $p;
      }

      my $new_backup=0;
      # Wann wurde letztes Backup angefangen
      if(-f "$p/last_backup_start") {
	open($D, "<$p/last_backup_start");
	my $last_backup_start=<$D>;
	chop($last_backup_start);

	$backup_start{$p}=$last_backup_start;

        my @fileinfo=stat("$p/last_backup_start");
        my $mtime_last=$fileinfo[9];

        my $mtime_stat=0;
        if(-f "$p/statistic") {
          my @fileinfo=stat("$p/statistic");
          $mtime_stat=$fileinfo[9];
        }

        if($mtime_last>$mtime_stat) {
          $new_backup=1;
        }

	close($D);
      }
      else {
        $new_backup=1;
      }

      if($new_backup) {
        # Statistic generieren - all
        print ("cd $p ; du -skl ".(join(" ", @list))."\n");
        print ("cd $p ; du -skc ".(join(" ", reverse(@list)))."\n");
        print ("cd $p ; du -skc ".(join(" ", @list))."\n");

        system("echo '[fullsize]' > $p/statistic.new");
        system("cd $p ; du -skl ".(join(" ", @list)).
                " >> $p/statistic.new 2> /dev/null");
        system("echo >> $p/statistic.new");
        system("echo '[realsize]' >> $p/statistic.new");
        system("cd $p ; du -skc ".(join(" ", reverse(@list))).
                " >> $p/statistic.new 2> /dev/null");
        system("echo >> $p/statistic.new");
        system("echo '[backrealsize]' >> $p/statistic.new");
        system("cd $p ; du -skc ".(join(" ", @list)).
                " >> $p/statistic.new 2> /dev/null");
        system("mv $p/statistic.new $p/statistic");
      }

      ($last_curr, $last_total)=update_progress($p);
 
      open($D, "tail -n 1 $p/statistic.last_backup.progress|");
      <$D> =~ /^([0-9]*) /;
      $new_curr=$1;
      close($D);
  
      my $progress=$new_curr-$last_curr;
      $progress_last_backup_list{$p}=$progress;
      $last_backup_list{$p}=$new_curr;

      open($D, "tail -n 1 $p/statistic.total.progress|");
      <$D> =~ /^([0-9]*) /;
      $new_total=$1;
      close($D);

      my $progress=$new_total-$last_total;
      $progress_total_list{$p}=$progress;
      $total_list{$p}=$new_total;

      # finish
      $done{$p}=1;

      save_var_info("not done", \%conf);
    }
    else {
#      print "skipping $p\n";
    }
  }
  else {
    opendir($DIRS, $p);
    while($r=readdir($DIRS)) {
      if(($r !~ /^\./)&&(-d "$p/$r")) { 
	process("$p/$r");

	open($stat, "<$p/$r/statistic")
	  or print MAIL "no statistic in $p/$r/statistic\n";

	$mode="";
	while($x=<$stat>) {
	  chop($x);
	  if($x =~ /^\[(.*)\]/) {
	    $mode=$1;
	    $stat_modes{$1}=1;
	  }
	  elsif($x =~ /^([0-9]+)[ \t](.*)$/) {
	    $stat_sum{"${mode}_$2"}+=$1;
	  }
	}
	close($stat);
      }
    }
#    closedir($DIRS);

    open($stat, ">$p/statistic.new");
    foreach $mode (keys %stat_modes) {
      print $stat "[$mode]\n";
      foreach(sort keys %stat_sum) {
	if($_ =~ /^${mode}_(.*)$/) {
	  print $stat "$stat_sum{$_}\t$1\n";
	}
      }
      print $stat "\n";
    }
    close($stat);
    system("mv $p/statistic.new $p/statistic");

    update_progress($p);
  }
}

getopt("c");
if($opt_c) {
  $CONFIGFILE=$opt_c;
}

# Configfile einlesen
open(CONF, "<$CONFIGFILE") || die "$CONFIGFILE not found!\n";
%conf=();

# Jede Zeile durchgehen
while($row=<CONF>) {
  chop($row);
  chop($row) if(substr($row, length($row)-1, 1) eq "\r"); # fuer DOS-Files

  if($row ne "") {
    # Wenn es sich um keine Leerzeile handelt, dann in die Config aufnehmen
    if($row !~ /^#/) {
      ($key, $value)=split("=", $row);
      $conf{$key}=$value;
    }
  }
  else {
    # Leerzeile -> Was machen
    @k=keys %conf;
    if(@k>0) {
      process_dir(\%conf);
    }
    %conf=();
  }
}


@k=keys %conf;
if(@k>0) {
  process_dir(\%conf);
}

sub process_dir {
  my %conf=%{$_[0]};

  open(MAIL, "|/usr/lib/sendmail $conf{mail}");
  print MAIL "To: Backup-Admin <$conf{mail}>\n";
  print MAIL "Subject: Daily Statistic of Backup\n";
  print MAIL "\n";

  load_var_info(\%conf);

  process($conf{root_dir});

  print MAIL "Uebersicht ueber die Dateisysteme:\n";
  print MAIL sprintf("%-30s  %8s  %8s  %8s  %4s  (%7s)\n", "Mounted on", "Size", "Used", "Avail", "Use%", "Change");
  open(DF, "df -k|");
  while($r=<DF>) {
    if($r =~ /[\t ]+([0-9]+)[\t ]*([0-9]+)[\t ]*([0-9]+)[\t ]*([0-9]+%)[\t ]*(\/backup[A-Za-z0-9\-\/_]+)$/) {
      open($statdf, "tail -n1 $5/statistic.df | cut -d\" \" -f1 |");
      $last=<$statdf>;
      close($statdf);

      print MAIL sprintf("%-30s %8.1fG %8.1fG %8.1fG  %3.0f%%  (%+6.1fG)\n", $5, $1/$gb, $2/$gb, $3/$gb, $4, ($2-$last)/$gb);

      open($statdf, ">>$5/statistic.df");
      print $statdf sprintf("%s %s\n", $2, strftime("%Y-%m-%d", localtime));
      close($statdf);
    }
  }
  close(DF);
  print MAIL "\n";

  print MAIL "Folgende Backups haben sich relativ am meisten vergroessert:\n";
  @progress_last_backup_list_sort=sort { $progress_last_backup_list{$b} <=> $progress_last_backup_list{$a} } keys %progress_last_backup_list;
  @progress_last_backup_list_sort=splice(@progress_last_backup_list_sort, 0, 20);
  foreach (@progress_last_backup_list_sort) {
    print MAIL sprintf "  %-60s %9.2fM\n", $_, $progress_last_backup_list{$_}/1024;
  }
  print MAIL "\n";

  print MAIL "Folgende Backups haben sich absolut am meisten vergroessert:\n";
  @progress_total_list_sort=sort { $progress_total_list{$b} <=> $progress_total_list{$a} } keys %progress_total_list;
  @progress_total_list_sort=splice(@progress_total_list_sort, 0, 20);
  foreach (@progress_total_list_sort) {
    print MAIL sprintf "  %-60s %9.2fM\n", $_, $progress_total_list{$_}/1024;
  }

  print MAIL "\nFolgende Backups wurden seit mind. 3 Tagen nicht vollendet:\n";
  @backup_not_ended_sort=sort { $backup_not_ended{$b} cmp $backup_not_ended{$a} } keys %backup_not_ended;
  foreach(@backup_not_ended_sort) {
    $backup_not_ended{$_} =~ /^([0-9]{4}-[0-9]{2}-[0-9]{2}) /;
    print MAIL sprintf "  %-50s %10s", $_, $1; 

    if($backup_start{$_} =~ /^([0-9]{4}-[0-9]{2}-[0-9]{2}) /) {
      print MAIL sprintf " (start: %10s)", $1;
    }

    print MAIL "\n";
  }
  foreach(@backup_not_ended_unk) {
    print MAIL sprintf "  %-50s", $_;

    if($backup_start{$_} =~ /^([0-9]{4}-[0-9]{2}-[0-9]{2}) /) {
      print MAIL sprintf "           (start: %10s)", $1;
    }

    print MAIL "\n";
  }

  close(MAIL);

  save_var_info("done", \%conf);
  save_done_info(\%conf);
}
